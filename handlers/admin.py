from pathlib import Path

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


from create_bot_wb import bot
from keyboards import keyboard_client as client_kb
from keyboards import keyboard_admin as ad_kb
import config as cfg
from database.sqlite_db import Use

db = Use()


async def admin(message: types.Message):
    if str(message.from_user.id) not in cfg.admin_id:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    else:
        await message.answer('–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=ad_kb.adm_kb)




class FSM_edit_message(StatesGroup):
    choice_msg = State()
    msg = State()
    edit_or_cancel = State()

# –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
async def edit_message(message: types.Message):
    if str(message.from_user.id) not in cfg.admin_id:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    else:
        text = '<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n' \
                '–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–Ω–æ–ø–∫–∞—Ö: "–ü–æ–º–æ—â—å", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "–¢–∞—Ä–∏—Ñ—ã" –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        text_1 = '–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º –∑–∞–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ <b>—ç—Ç–∏ —Ç—ç–≥–∏</b>\n' \
                 '–î–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ <—Å—Å—ã–ª–∫–∞> –≤ –º–µ—Å—Ç–µ –≥–¥–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–∞\n' \
                 '–î–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ <–∫–æ–ª-–≤–æ> –≤ –º–µ—Å—Ç–µ, –≥–¥–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n' \
                 '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'

        await message.answer(text, parse_mode='HTML')
        await message.answer(text_1, reply_markup=ad_kb.choice_edit_btn)
        await FSM_edit_message.choice_msg.set()

async def edit_message_2(message: types.Message, state: FSMContext):
    if message.text in ['–ü–æ–º–æ—â—å üîé', '–†–µ—Ñ–µ—Ä–∞–ª—ã üë•', '–¢–∞—Ä–∏—Ñ—ã üëõ', '–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ']:
        async with state.proxy() as data:
            data['category'] = message.text
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=ad_kb.remove_kb)
            await FSM_edit_message.msg.set()
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞', reply_markup=ad_kb.adm_kb)
        await state.finish()

async def edit_message_3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
        try:
            await message.answer(f'<b>–í–∞—à —Ç–µ–∫—Å—Ç</b>\n{message.text}', reply_markup=ad_kb.cancel_or_edit, parse_mode='HTML')
        except:
            if '<—Å—Å—ã–ª–∫–∞>' in message.text:
                await message.answer(f'–í–∞—à —Ç–µ–∫—Å—Ç\n{message.text}', reply_markup=ad_kb.cancel_or_edit)
                await FSM_edit_message.edit_or_cancel.set()
            else:
                await message.answer('<b>–û—à–∏–±–∫–∞</b>\n'
                                     '–í–∏–¥–∏–º–æ –≤—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏—Å—å –æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', reply_markup=ad_kb.adm_kb, parse_mode='HTML')
                await state.finish()
        else:
            await FSM_edit_message.edit_or_cancel.set()

async def edit_message_4(message: types.Message, state: FSMContext):
    if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ':
        async with state.proxy() as data:
            if await db.exist_msg(str(data['category'])):
                await db.update_message(str(data['category']), str(data['msg']))
            else:
                await db.add_message(str(data['category']), str(data['msg']))
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ', reply_markup=ad_kb.adm_kb)

    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
        await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=ad_kb.adm_kb)
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞', reply_markup=ad_kb.adm_kb)

    await state.finish()



# –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def quantity_users(message: types.Message):
    if str(message.from_user.id) not in cfg.admin_id:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    else:
        total_number_users = await db.get_quantity_users()
        total_subs = await db.get_quantity_sub_users()

        text = f'<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_number_users}\n' \
               f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:</b> {total_subs}'
        await message.answer(text, parse_mode='HTML')



class FSM_send_message(StatesGroup):
    msg = State()
    cancel_or_send = State()

async def send_message(message: types.Message):
    if str(message.from_user.id) not in cfg.admin_id:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    else:
        text = '<b>–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>'
        text_1 = '–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º –∑–∞–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ <b>—ç—Ç–∏ —Ç—ç–≥–∏</b>\n' \
                 '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'

        await message.answer(text, parse_mode='HTML', reply_markup=ad_kb.remove_kb)
        await message.answer(text_1)

        await FSM_send_message.msg.set()

async def send_message_2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
    text = f'<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message.text}'
    await message.answer(text, parse_mode='HTML', reply_markup=ad_kb.send_or_cancel) # –æ—Ç–º–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    await FSM_send_message.cancel_or_send.set()

async def send_message_3(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
        await message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=ad_kb.adm_kb)
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ':
        await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=ad_kb.adm_kb)
        if await db.get_user_ids():
            async with state.proxy() as data:
                for tgid in await db.get_user_ids():
                    await bot.send_message(str(tgid[0]), data['msg'], parse_mode='HTML')
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ')
        else:
            await message.answer('–ù–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞', reply_markup=ad_kb.adm_kb)

    await state.finish()


async def back(message: types.Message):
    if str(message.from_user.id) not in cfg.admin_id:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    else:
        await message.answer('–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=client_kb.cl_kb)



class FSM_edit_payments(StatesGroup):
    image = State()
    price = State()
    title = State()
    description = State()
    choice = State()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
async def edit_pay(message: types.Message):
    if str(message.from_user.id) not in cfg.admin_id:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    else:
        text = '<b>–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞:</b>\n' \
               '    1. –§–æ—Ç–æ\n' \
               '    2. –¶–µ–Ω–∞\n' \
               '    3. –ù–∞–∑–≤–∞–Ω–∏–µ\n' \
               '    4. –û–ø–∏—Å–∞–Ω–∏–µ'
        await message.answer(text, parse_mode='HTML', reply_markup=ad_kb.adm_kb)

        text_2 = '–ü—Ä–∏—à–ª–∏—Ç–µ URL —Ñ–æ—Ç–æ\n' \
                 '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏—Ç–µ "–Ω–µ—Ç"'
        await message.answer(text_2, parse_mode='HTML', reply_markup=ad_kb.remove_kb)
        await FSM_edit_payments.image.set()

async def edit_pay_2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if '–Ω–µ—Ç' == str(message.text):
            data['image'] = 'None'
        else:
            data['image'] = str(message.text)

    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É', reply_markup=ad_kb.remove_kb)

    await FSM_edit_payments.price.set()

async def edit_pay_3(message: types.Message, state: FSMContext):
    try:
        int(message.text)
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ', reply_markup=ad_kb.adm_kb)
        await state.finish()
    else:
        if int(message.text) >= 100:

            async with state.proxy() as data:
                data['price'] = int(message.text)

            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞', reply_markup=ad_kb.remove_kb)
            await FSM_edit_payments.title.set()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–æ–ª—å—à–µ 100', reply_markup=ad_kb.adm_kb)
            await state.finish()

async def edit_pay_4(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = str(message.text)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    await FSM_edit_payments.description.set()

async def edit_pay_5(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text

    await message.answer('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?', reply_markup=ad_kb.pay_edit)
    await FSM_edit_payments.choice.set()


async def edit_pay_6(message: types.Message, state: FSMContext):
    if '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚úÖ' == str(message.text):
        async with state.proxy() as data:
            # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ –ë–î
            data_pay = (data['image'], data['price'], data['title'], data['description'],)
            await db.delete_pay_inf()
            await db.add_pay_inf(data_pay)

            await message.answer('–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑–º–µ–Ω–µ–Ω—ã ‚úÖ', reply_markup=ad_kb.adm_kb)
    else:
        await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùå', reply_markup=ad_kb.adm_kb)

    await state.finish()



class FSM_give_sub(StatesGroup):
    choice = State()
    user_id = State()
    choice_days = State()

async def give_sub(message: types.Message):
    if str(message.from_user.id) not in cfg.admin_id:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', reply_markup=ad_kb.choice_whom)
        await FSM_give_sub.choice.set()


async def give_sub_2(message: types.Message, state: FSMContext):
    if message.text in ['–î—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', '–°–µ–±–µ']:
        if message.text == '–°–µ–±–µ':
            await db.update_user_status(str(message.from_user.id), 'active')
            await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞', reply_markup=ad_kb.adm_kb)
            await state.finish()
        elif message.text == '–î—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é':
            txt = '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' \
                  '<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –µ–≥–æ, –ø—Ä–æ–ø–∏—Å–∞–≤ <b>/id</b> –±–æ—Ç—É</i>\n'
            await message.answer(txt, parse_mode='HTML', reply_markup=ad_kb.remove_kb)
            await FSM_give_sub.user_id.set()
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞', reply_markup=ad_kb.adm_kb)
        await state.finish()


async def give_sub_3(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    exist_user = await db.exist_user(str(message.text))
    if exist_user:
        async with state.proxy() as data:
            data['user_id'] = str(message.text)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=await ad_kb.count_days())
            await FSM_give_sub.choice_days.set()
    else:
        await message.answer('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º ID', reply_markup=ad_kb.adm_kb)
        await state.finish()


async def give_sub_4(message: types.Message, state: FSMContext):
    if int(message.text) in range(1, 8):
        async with state.proxy() as data:
            days = int(message.text)
            cur_days = await db.get_sub_days(data['user_id'])
            new_days = cur_days - days
            await db.update_sub_days(data['user_id'], new_days)
            await db.update_user_status(data['user_id'], 'active')
            await message.answer(f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {message.text} –¥–Ω–µ–π –≤—ã–¥–∞–Ω–∞', reply_markup=ad_kb.adm_kb)
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', reply_markup=ad_kb.adm_kb)
    await state.finish()





def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(admin, Text(equals=cfg.admin_password), chat_type='private')
    dp.register_message_handler(edit_message, Text(equals='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è ‚úè'), chat_type='private')
    dp.register_message_handler(edit_message_2, state=FSM_edit_message.choice_msg, chat_type='private')
    dp.register_message_handler(edit_message_3, state=FSM_edit_message.msg, chat_type='private')
    dp.register_message_handler(edit_message_4, state=FSM_edit_message.edit_or_cancel, chat_type='private')
    dp.register_message_handler(quantity_users, Text(equals='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë•'), chat_type='private')
    dp.register_message_handler(send_message, Text(equals='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úâ'), chat_type='private')
    dp.register_message_handler(send_message_2, state=FSM_send_message.msg, chat_type='private')
    dp.register_message_handler(send_message_3, state=FSM_send_message.cancel_or_send, chat_type='private')
    dp.register_message_handler(back, Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è üí§'), chat_type='private')

    dp.register_message_handler(edit_pay, Text(equals='–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂ üëõ'), chat_type='private')
    dp.register_message_handler(edit_pay_2, state=FSM_edit_payments.image, chat_type='private')
    dp.register_message_handler(edit_pay_3, state=FSM_edit_payments.price, chat_type='private')
    dp.register_message_handler(edit_pay_4, state=FSM_edit_payments.title, chat_type='private')
    dp.register_message_handler(edit_pay_5, state=FSM_edit_payments.description, chat_type='private')
    dp.register_message_handler(edit_pay_6, state=FSM_edit_payments.choice, chat_type='private')
    
    dp.register_message_handler(give_sub, Text(equals='–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'), chat_type='private')
    dp.register_message_handler(give_sub_2, state=FSM_give_sub.choice, chat_type='private')
    dp.register_message_handler(give_sub_3, state=FSM_give_sub.user_id, chat_type='private')
    dp.register_message_handler(give_sub_4, state=FSM_give_sub.choice_days, chat_type='private')


