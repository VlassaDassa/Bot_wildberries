import datetime
from threading import Thread
import asyncio

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types.message import ContentType

from create_bot_wb import bot, dp
from keyboards import keyboard_client as kb
from inline_keyboards import menu
import config as cfg
from database.sqlite_db import Use
from bot_buyer import bot_wb
from other import other
from inline_keyboards import client_in as in_cl

db = Use()


async def start(message: types.Message):
    txt = await db.get_msg(str(message.text.split(' ')[0]))
    try:
        await message.answer(txt, parse_mode='HTML', reply_markup=kb.cl_kb)
    except:
        pass

    await db.add_user(message.from_user.id, message.from_user.username, datetime.datetime.today().strftime('%d/%m/%y'))
    await db.add_status_user(message.from_user.id, 'inactive')
    await db.set_link_status(message.from_user.id, 'inactive')
    await db.set_profile_status(message.from_user.id, 'inactive')
    await db.add_count_send(message.from_user.id, 0)
    await db.add_sub_day(str(message.from_user.id))

    if len(message.text) > 6:
        if str(message.text.split(' ')[1]) != str(message.from_user.id):
            if await db.exist_user(message.text.split(' ')[1]):
                if not await db.exist_referral(message.from_user.id):
                    await db.add_referral(message.text.split(' ')[1], message.from_user.id)

                    referral_name = message.from_user.username
                    referrer_name = await db.get_fullname(message.text.split(' ')[1])

                    await message.answer(f'–í—ã —Å—Ç–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º {referrer_name}')
                    try:
                        await bot.send_message(message.text.split(' ')[1], f'{referral_name} —Å—Ç–∞–ª –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º')
                    except:
                       pass
                    
                    # –ü—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è
                    referrer_id = message.text.split(' ')[1]
                    status = await db.get_status_user(str(referrer_id))
                    if status[0] == 'active':
                        cur_days = await db.get_sub_days(referrer_id)
                        new_days = int(cur_days)-1
                        await db.update_sub_days(referrer_id, int(new_days))


async def help(message: types.Message):
    txt = await db.get_msg(str(message.text))
    try:
        await message.answer(txt, parse_mode='HTML', reply_markup=kb.cl_kb)
    except:
        pass


async def rate(message: types.Message):
    status = await db.get_status_user(message.from_user.id)
    f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞\n' \
    f'<b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ—á—ë—Ç —á–µ—Ä–µ–∑:</b> 0 –¥–Ω–µ–π'
    if status[0] == 'active':
        days = await db.get_sub_days(message.from_user.id)
        if days < 0:
            new_days = days - int(cfg.sub_days)
            if new_days < 0:
                txt = f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞\n' \
                      f'<b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ—á—ë—Ç —á–µ—Ä–µ–∑:</b> {int(new_days) * -1} –¥–Ω–µ–π'
            else:
                txt = f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞\n' \
                      f'<b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ—á—ë—Ç —á–µ—Ä–µ–∑:</b> {int(new_days)} –¥–Ω–µ–π'
        else:
            new_days = int(cfg.sub_days) - days
            if new_days < 0:
                txt = f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞\n' \
                      f'<b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ—á—ë—Ç —á–µ—Ä–µ–∑:</b> {int(new_days) * -1} –¥–Ω–µ–π'
            else:
                txt = f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞\n' \
                      f'<b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ—á—ë—Ç —á–µ—Ä–µ–∑:</b> {int(new_days)} –¥–Ω–µ–π'
                
        try:
            await message.answer(txt, parse_mode='HTML')
        except:
            pass

    else:
        txt = str(await db.get_msg(str(message.text)))
        try:
            await message.answer(txt, parse_mode='HTML', reply_markup=in_cl.buy_but)
        except:
            pass


async def referral(message: types.Message):
    txt = await db.get_msg(str(message.text))
    try:
        await message.answer(txt.replace('<—Å—Å—ã–ª–∫–∞>', f'https://t.me/Premium_WB_SalesBot?start={message.from_user.id}').replace('<–∫–æ–ª-–≤–æ>', str(await db.get_count_referrals(message.from_user.id))),
                             parse_mode='HTML', reply_markup=kb.cl_kb)
    except:
        pass


async def choosing_a_category(message: types.Message):
    global mes_del
    await message.delete()
    mes_del = await message.answer('–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üìã', reply_markup=await menu.good_cat(cfg.categories, message.from_user.id))


# –ü–æ–∫—É–ø–∫–∞
@dp.callback_query_handler(lambda call: call.data == 'buy_sub')
async def buy_sub(callback_query: types.CallbackQuery):
    user_status = await db.get_status_user(callback_query.from_user.id)

    # pay data
    pay_data = await db.get_pay_inf()
    if not pay_data:
        await bot.send_message(callback_query.from_user.id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —É–∫–∞–∑–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–∂–µ—Ç–µ\n'
                                                            '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–µ–º—É')
    else:

        PRICE = types.LabeledPrice(label=pay_data[2], amount=pay_data[2] * 100)
        if user_status[0] == 'inactive':
            await bot.send_invoice(callback_query.from_user.id,
                                   title=pay_data[3],
                                   description=pay_data[4],
                                   provider_token=cfg.PAYMENTS_TOKEN,
                                   currency='rub',
                                   photo_size=600,
                                   photo_width=300,
                                   photo_height=300,
                                   photo_url=pay_data[1],
                                   is_flexible=False,
                                   prices=[PRICE],
                                   start_parameter='one-month-subscription',
                                   payload='buy-prod')
        else:
            text = '<b>–û—à–∏–±–∫–∞</b>\n' \
                   '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞'
            await bot.send_message(callback_query.from_user.id, text, parse_mode='HTML')

        await bot.answer_callback_query(callback_query.id)


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query_handler(check: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(check.id, ok=True)


# –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂
async def successful_payment(message: types.Message):
    await db.update_user_status(str(message.from_user.id), 'active')
    await db.update_sub_days(str(message.from_user.id), 0)
    text = '<b>–£—Å–ø–µ—à–Ω–æ ‚úÖ</b>\n' \
           '–£ –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n' \
           '    ‚óè –ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–µ –∑–∞—Ö–æ–¥—è –Ω–∞ —Å–∞–π—Ç\n' \
           '    ‚óè –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤\n' \
           '' \
           '–í–ê–ñ–ù–û! –ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'

    await message.answer(text, parse_mode='HTML', reply_markup=kb.cl_kb)


# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–µ–Ω—é
@dp.callback_query_handler(lambda call: True)
async def menu_cat(callback_query: types.CallbackQuery):
    # –£–±—Ä–∞—Ç—å –º–µ–Ω—é
    if callback_query.data == 'del':
        try:
            await bot.delete_message(callback_query.from_user.id, mes_del.message_id)
        except:
            pass

    # –ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–∞–ª–æ—á–µ–∫
    elif callback_query.data in cfg.categories:
        # –ï—Å–ª–∏ user —É–∂–µ –≤—ã–±–∏—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if await db.get_user_categories(callback_query.from_user.id):
            user_categories = [i[0] for i in await db.get_user_categories(callback_query.from_user.id)]

            # –ï—Å–ª–∏ –¥–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É
            if callback_query.data not in user_categories:
                await db.add_user_category(callback_query.from_user.id, callback_query.data)
                await callback_query.message.edit_reply_markup(await menu.good_cat(cfg.categories, callback_query.from_user.id))

            # –£–±—Ä–∞—Ç—å –≥–∞–ª–æ—á–∫—É
            else:
                await db.delete_user_category(callback_query.from_user.id, callback_query.data)
                await callback_query.message.edit_reply_markup(await menu.good_cat(cfg.categories, callback_query.from_user.id))

        # –ï—Å–ª–∏ –Ω–µ –≤—ã–±–∏—Ä–∞–ª
        else:
            await db.add_user_category(callback_query.from_user.id, callback_query.data)
            await callback_query.message.edit_reply_markup(await menu.good_cat(cfg.categories, callback_query.from_user.id))


    # –ü—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞ –∫—É–ø–∏—Ç—å
    elif 'buy' in callback_query.data and 'size' not in callback_query.data:
        prod_id = callback_query.data.split('_')[1]
        link = await db.get_good_link(str(prod_id))
        loop = asyncio.get_event_loop()

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—É—Å–∫
        if await db.exist_count_browser():
            print('–ï—Å—Ç—å –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞—é')
            for _ in range(1000):
                if await db.get_count_browsers() < cfg.count_browser:
                    buy = Thread(target=bot_wb.buy_prod, args=(callback_query.from_user.id, False, link[0], loop))
                    buy.start()
                    print('–î–æ–∂–¥–∞–ª—Å—è. –ó–∞–ø—É—Å–∫–∞—é')
                    break
                else:
                    await asyncio.sleep(0.5)
        else:
            print('–û—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç. –ó–∞–ø—É—Å–∫–∞—é')
            buy = Thread(target=bot_wb.buy_prod, args=(callback_query.from_user.id, False, link[0], loop))
            buy.start()


    # –ö–Ω–æ–ø–∫–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
    elif 'buy' in callback_query.data and 'size' in callback_query.data:
        prod_id = str(callback_query.data.split('_')[2])
        await callback_query.message.edit_reply_markup(await menu.choice_size(prod_id))


    # –ü–æ–∫—É–ø–∫–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
    elif 'size' in callback_query.data and 'buy' not in callback_query.data:
        size = str(callback_query.data.split('_')[1])
        prod_id = str(callback_query.data.split('_')[2])
        link = await db.get_good_link(str(callback_query.data.split('_')[2]))
        loop = asyncio.get_event_loop()

        await callback_query.message.edit_reply_markup(await menu.button_size_buy(prod_id))

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—É—Å–∫
        if await db.exist_count_browser():
            print('–ï—Å—Ç—å –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞—é')
            for _ in range(1000):
                if await db.get_count_browsers() < cfg.count_browser:
                    buy = Thread(target=bot_wb.buy_prod, args=(callback_query.from_user.id, size, link[0], loop))
                    buy.start()
                    print('–î–æ–∂–¥–∞–ª—Å—è. –ó–∞–ø—É—Å–∫–∞—é')
                    break
                else:
                    await asyncio.sleep(0.5)
        else:
            print('–û—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç. –ó–∞–ø—É—Å–∫–∞—é')
            buy = Thread(target=bot_wb.buy_prod, args=(callback_query.from_user.id, size, link[0], loop))
            buy.start()





class FSM_link_account(StatesGroup):
    number = State()

async def link_an_account(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_status = await db.get_status_user(message.from_user.id)
    if user_status[0] == 'active':

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        status_profile = await db.select_profile_status(message.from_user.id)
        if status_profile[0] == 'inactive':

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏
            code = await db.select_link_status(message.from_user.id)
            if code[0] == 'inactive':
                await message.answer('<b>–ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–∫–∏</b>\n'
                                     '–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä (10 —Ü–∏—Ñ—Ä)\n'
                                     '<b>–ü—Ä–∏–º–µ—Ä: </b><i>9612158000</i>', reply_markup=kb.cl_kb, parse_mode='HTML')
                await FSM_link_account.number.set()

            else:
                await message.answer('<b>–û—à–∏–±–∫–∞</b>\n'
                                     '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –∑–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≤—è–∑–∫–∏', parse_mode='HTML', reply_markup=kb.cl_kb)
        else:
            await message.answer('<b>–û—à–∏–±–∫–∞</b>\n'
                                 '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω', parse_mode='HTML', reply_markup=kb.cl_kb)
    else:
        await message.answer('<b>–û—à–∏–±–∫–∞</b>\n'
                             '–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø', parse_mode='HTML', reply_markup=kb.cl_kb)

async def link_an_account_1(message: types.Message, state: FSMContext):
    db = Use()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞
    if await other.check_number(message.text):
        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—É—Å–∫
        if await db.exist_count_browser():
            await message.answer('–û–∂–∏–¥–∞–π—Ç–µ...')
            for _ in range(1000):
                if await db.get_count_browsers() < cfg.count_browser:
                    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç—É–ø–∏—Ç –≤–∞–º –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –º–∏–Ω—É—Ç—ã\n'
                                         '–ß–µ—Ä–µ–∑ `/send_code` –∫–æ–¥', parse_mode='MARKDOWN', reply_markup=kb.cl_kb)

                    loop = asyncio.get_event_loop()
                    test = Thread(target=bot_wb.save_user_profile, args=(str(message.text), message.from_user.id, loop))
                    test.start()
                    break
                else:
                    await asyncio.sleep(0.5)
        else:
            await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç—É–ø–∏—Ç –≤–∞–º –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –º–∏–Ω—É—Ç—ã\n'
                                 '–ß–µ—Ä–µ–∑ `/send_code` –∫–æ–¥', parse_mode='MARKDOWN', reply_markup=kb.cl_kb)

            loop = asyncio.get_event_loop()
            test = Thread(target=bot_wb.save_user_profile, args=(str(message.text), message.from_user.id, loop))
            test.start()

    else:
        await message.answer('<b>–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä</b>\n'
                             '–ò—Å–∫–ª—é—á–∏—Ç–µ "+7" –∏ "8" –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–º–µ—Ä–∞\n'
                             '<b>–ü—Ä–∏–º–µ—Ä:</b> <i>9612158000 (10 —Ü–∏—Ñ—Ä)</i>', parse_mode='HTML', reply_markup=kb.cl_kb)
    await state.finish()



async def get_code(message: types.Message):
    status = await db.select_link_status(message.from_user.id)
    if status[0] == 'active':
        code = await db.async_get_user_code(message.from_user.id)
        if not code:
            if len(message.text) > len('/send_code '):
                code = message.text.split(' ')[1]
                await db.async_add_user_code(message.from_user.id, code)
                await message.answer('–ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à –∫–æ–¥, –æ–∂–∏–¥–∞–π—Ç–µ', reply_markup=kb.cl_kb)
            else:
                await message.answer('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–¥\n'
                                     '`/send_code` –∫–æ–¥', parse_mode='MARKDOWN', reply_markup=kb.cl_kb)
        else:
            await db.async_update_user_code(message.from_user.id, str(message.text.split(' ')[1]))
            await message.answer('–ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à –∫–æ–¥, –æ–∂–∏–¥–∞–π—Ç–µ', reply_markup=kb.cl_kb)
    else:
        await message.answer('<b>–û—à–∏–±–∫–∞</b>\n'
                             '–í—ã –Ω–µ –æ–∂–∏–¥–∞–µ—Ç–µ –∫–æ–¥–∞', reply_markup=kb.cl_kb, parse_mode='HTML')


async def captcha(message: types.Message):
    status = await db.select_link_status(message.from_user.id)
    if status[0] == 'active':
        captcha = await db.async_get_user_captcha(message.from_user.id)
        if not captcha:
            if len(message.text) > len('/captcha '):
                await db.async_add_user_captcha(message.from_user.id, message.text.split(' ')[1])
                await message.answer('–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ', reply_markup=kb.cl_kb)
            else:
                await message.answer('–û—à–∏–±–∫–∞\n'
                                     '–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É\n'
                                     '`/send_captcha` –∫–æ–¥', reply_markup=kb.cl_kb, parse_mode='MARKDOWN')
        else:
            await message.answer('<b>–û—à–∏–±–∫–∞</b>\n'
                                 '–í—ã —É–∂–µ –≤–≤–µ–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É', reply_markup=kb.cl_kb, parse_mode='HTML')
    else:
        await message.answer('<b>–û—à–∏–±–∫–∞</b>\n'
                             '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å', parse_mode='HTML')



async def get_id(message: types.Message):
    await message.answer(f'–í–∞—à ID: {message.from_user.id}', reply_markup=kb.cl_kb)







def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'], chat_type='private')
    dp.register_message_handler(help, Text(equals='–ü–æ–º–æ—â—å üîé'), chat_type='private')
    dp.register_message_handler(rate, Text(equals='–¢–∞—Ä–∏—Ñ—ã üëõ'), chat_type='private')
    dp.register_message_handler(referral, Text(equals='–†–µ—Ñ–µ—Ä–∞–ª—ã üë•'), chat_type='private')
    dp.register_message_handler(choosing_a_category, Text(equals='–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é üìã'), chat_type='private')

    dp.register_message_handler(link_an_account, Text(equals='–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç üìé'), chat_type='private')
    dp.register_message_handler(link_an_account_1, state=FSM_link_account.number, chat_type='private')

    dp.register_message_handler(get_code, commands=['send_code'], chat_type='private')
    dp.register_message_handler(captcha, commands=['captcha'], chat_type='private')

    dp.register_message_handler(successful_payment, content_types=ContentType.SUCCESSFUL_PAYMENT, chat_type='private')
    dp.register_message_handler(get_id, commands=['id'], chat_type='private')
